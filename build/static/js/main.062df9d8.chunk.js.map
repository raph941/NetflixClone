{"version":3,"sources":["images/netflix.png","axios.js","components/Row.js","requests.js","components/Banner.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","orginal_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","videoId","opts","height","width","playerVars","autoplay","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","logoImage","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.062df9d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netflix.a1f673e7.png\";","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n})\n\n\nexport default instance","import React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport \"../styles/Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  // options for playing movie trailers\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  // handle movie poster click event\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      // {\n      //   movie?.title || movie?.name || movie?.orginal_title\n      // }\n      movieTrailer(movie?.title || movie?.name || movie?.orginal_title || \"\")\n        .then((url) => {\n          // we get back something like this https://www.youtube.com/watch?v=XEFDGFDFD, we only need the code at the end of that\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  // a snippet of code that runs based on specific condition\n  useEffect(() => {\n    // if [](i.e empty array at the end) runs once when the page loads and will not run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters img-fluid\">\n        {/* poster movies would be displaey in row here */}\n        {movies.map((movie) => {\n          return (\n            <img\n              key={movie.id}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n              alt={`${movie.name}`}\n              onClick={() => handleClick(movie)}\n            />\n          );\n        })}\n      </div>\n\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n\n      {/* Container --> posters */}\n    </div>\n  );\n}\n\nexport default Row;\n","const APIKEY = \"41107a387e6f2eac72bee32c50c36eb5\"\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${APIKEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/movie?api_key=${APIKEY}`,\n  fetchActionMovies: `/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=popularity.desc&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=popularity.desc&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=popularity.desc&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=popularity.desc&with_genres=10749`,\n  fetchDocumentries: `/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=popularity.desc&with_genres=99`,\n};\n\nexport default requests","import React, {useState, useEffect} from 'react'\nimport axios from '../axios'\nimport requests from '../requests'\nimport \"../styles/Banner.css\"\n\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([])\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchActionMovies)\n\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length -  1)\n                ]\n            )\n\n            return request\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n\n    return (\n      <header className=\"banner\"\n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\n                ${baseURL}${movie?.backdrop_path}\n            )`\n        }}\n      >\n        {/* <-- Background image */}\n        <div className=\"banner__contents\">\n          <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.orginal_title}</h1>\n          \n          <div className=\"banner__buttons\">\n              <button className=\"banner__button\">Play</button>\n              <button className = \"banner__button\">My List</button>\n          </div>\n          \n          <h1 className=\"banner__description\">\n            { truncate(movie?.overview, 150) }\n          </h1>\n        </div>\n\n        <div className=\"banner__fadeBottom\" ></div>\n      </header>\n    );\n}\n\nexport default Banner","import React, {useState, useEffect} from 'react'\nimport '../styles/Nav.css'\nimport logoImage from '../images/netflix.png'\n\nfunction Navbar(){\n    const [show, handleShow] = useState(false)\n\n    useEffect(() => {\n        window.addEventListener('scroll', ()=> {\n            if (window.scrollY > 100) {\n                handleShow(true)\n            } else handleShow(false)\n        })\n    }, []);\n\n    return(\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img className=\"nav__logo\" src ={logoImage} alt=\"logo\" />\n            <img className = \"nav__avatar\" src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR55osOG8tnW5HlQ90n28eU-AUG2Hp1F5II8Q&usqp=CAU' alt = \"logo\" />\n\n\n        </div>\n    );\n}\n\nexport default Navbar","import React from 'react';\nimport './styles/App.css';\nimport Row from './components/Row';\nimport Banner from './components/Banner'\nimport Nav from './components/Nav'\nimport requests from './requests';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Navbar */}\n      <Nav />\n      {/* Banner compponent */}\n      <Banner />\n      {/* Component for the different categories of moives */}\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}